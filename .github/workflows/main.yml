name: Build and Push Docker Image

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/pos-tech-challenge-2
          tags: |
            type=raw,value=latest
            type=sha,prefix=develop-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  test-docker-compose:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file for testing
        run: |
          cat > .env << EOF
          POSTGRES_DB=school_portal_db
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres
          POSTGRES_PORT=5432
          DATABASE_URL=postgresql://postgres:postgres@postgres:5432/school_portal_db
          JWT_SECRET=test-secret-key-for-github-actions
          EOF

      - name: Test docker compose
        run: |
          # Start PostgreSQL
          docker compose up -d postgres

          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          timeout 60 bash -c 'until docker compose exec postgres pg_isready -U postgres; do sleep 2; done'

          # Run Prisma migrations
          echo "Running Prisma migrations..."
          docker compose up --build prisma-migrate

          # Start the application
          echo "Starting the application..."
          docker compose up -d app

          # Wait for the application to be healthy
          echo "Waiting for application to be healthy..."
          timeout 120 bash -c 'until docker compose exec app wget --no-verbose --tries=1 --spider http://localhost:3000/health; do sleep 5; done'

          # Check if all services are running
          echo "Checking service status..."
          docker compose ps

          # Test the health endpoint
          echo "Testing health endpoint..."
          docker compose exec app wget -qO- http://localhost:3000/health

          # Show application logs
          echo "Application logs:"
          docker compose logs app --tail=50

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          docker system prune -f

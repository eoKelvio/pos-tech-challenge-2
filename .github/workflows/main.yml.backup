# CI/CD Pipeline completa para POS Tech Challenge
# Inclui: Testes E2E, AnÃ¡lise de Qualidade, Build Docker e Deploy

name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npm run test:ci
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npx prettier --check "src/**/*.ts" "test/**/*.ts"

      - name: Run security audit
        run: npm audit --audit-level moderate

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, quality]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/develop'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/pos-tech-challenge-2
          tags: |
            type=raw,value=latest
            type=sha,prefix=develop-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.ref == 'refs/heads/develop' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  test-docker-compose:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file for testing
        run: |
          cat > .env << EOF
          POSTGRES_DB=school_portal_db
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres
          POSTGRES_PORT=5432
          DATABASE_URL=postgresql://postgres:postgres@postgres:5432/school_portal_db
          JWT_SECRET=test-secret-key-for-github-actions
          EOF

      - name: Test docker compose
        run: |
          # Start PostgreSQL
          docker compose up -d postgres

          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          timeout 60 bash -c 'until docker compose exec postgres pg_isready -U postgres; do sleep 2; done'

          # Run Prisma migrations
          echo "Running Prisma migrations..."
          docker compose up --build prisma-migrate

          # Start the application
          echo "Starting the application..."
          docker compose up -d app

          # Wait for the application to be healthy
          echo "Waiting for application to be healthy..."
          timeout 120 bash -c 'until docker compose exec app wget --no-verbose --tries=1 --spider http://localhost:3000/health; do sleep 5; done'

          # Check if all services are running
          echo "Checking service status..."
          docker compose ps

          # Test the health endpoint
          echo "Testing health endpoint..."
          docker compose exec app wget -qO- http://localhost:3000/health

          # Show application logs
          echo "Application logs:"
          docker compose logs app --tail=50

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          docker system prune -f
